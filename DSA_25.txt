DSA Problems

Problem No.1
Java 1D Array

Program:
import java.util.*;

public class Solution {

    public static void main(String[] args) {
	   
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        int a[]=new int[n];
        for(int i=0;i<n;i++){
            a[i]=sc.nextInt();
        }


        scan.close();

        // Prints each sequential element in array a
        for (int i = 0; i < a.length; i++) {
            System.out.println(a[i]);
        }
    }
}
-----------------------------------------------------------------------------------------------------
Problme No. 2
Java 2D array

Program:

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;


public class Solution {
    public static void main(String[] args) throws IOException {
       Scanner scanner = new Scanner(System.in); int[][] arr = new int[6][6]; for (int i = 0; i < 6; i++) { for (int j = 0; j < 6; j++) { arr[i][j] = scanner.nextInt(); } }

    int maxSum = Integer.MIN_VALUE;
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            int sum = arr[i][j] + arr[i][j+1] + arr[i][j+2] 
                                   + arr[i+1][j+1] 
                    + arr[i+2][j] + arr[i+2][j+1] + arr[i+2][j+2];
            maxSum = Math.max(maxSum, sum);
        }
    }

    System.out.println(maxSum);
    }
}

---------------------------------------------------------------------------------------------------------------------------
Problem No. 3
Java Negative Subarray

Program:
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int a[]=new int[n];
        for(int i=0;i<n;i++){
            a[i]=sc.nextInt();
            // System.out.print(a[i]+" ");
        }
        int s=0,c=0;
        for(int i=0;i<n;i++){
            s=0;
            for(int j=i;j<n;j++){
                s=s+(a[j]);
                if(s<0){
                    c++;
                }
                // System.out.print(s+" ");
            }

        }
        System.out.println(c);
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------
Problem No. 4
 Java ArrayList

Program:
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        ArrayList<ArrayList<Integer>> all=new ArrayList<ArrayList<Integer>>();
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        for(int i=0;i<n;i++){
             int d=sc.nextInt();
            ArrayList<Integer> a=new ArrayList<>();
            for(int j=0;j<d;j++){
                int k=sc.nextInt();
                a.add(k);
            }
            all.add(a);
        }
        int q=sc.nextInt();
        int x,y;
        for(int i=0;i<q;i++){
            x=sc.nextInt();
            y=sc.nextInt();
            if(x>n || x<=0){
                System.out.println("ERROR!");
            }
            else if(y<=0 || y> all.get(x-1).size())
            {
                System.out.println("ERROR!");
            }
            else{
                System.out.println(all.get(x-1).get(y-1));
            }
        }
    }
}

------------------------------------------------------------------------------------------------------------------------------
Problem No.6
Java List

Program:
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
       Scanner sc=new Scanner(System.in);
       int n=sc.nextInt();
       ArrayList<Integer> al=new ArrayList<>();
       for(int i=0;i<n;i++){
           int k=sc.nextInt();
           al.add(k);
       }
       int q=sc.nextInt();
       int x,y;
       for(int i=0;i<q;i++){
           String s=sc.next();
           if(s.equals("Insert")){
               x=sc.nextInt();
               y=sc.nextInt();
               al.add(x,y);
           }
           else{
               int a=sc.nextInt();
               al.remove(a);
           }
       }
       for(int i=0;i<al.size();i++){
           System.out.print(al.get(i)+" ");
       }
    }
}

---------------------------------------------------------------------------------------------------------------------------------
Problem No. 7
Java Stack
Program:
import java.util.*;
class Solution{
	
	public static void main(String []argh)
	{
		Scanner sc = new Scanner(System.in);
		
		while (sc.hasNext()) {
			String in=sc.next();
            //Complete the code
            Stack<String> s=new Stack<String>();
            for(int i=0;i<in.length();i++){
                String str=String.valueOf(in.charAt(i));
                if(s.empty()){
                    s.push(str);
                }
                else{
                    if((s.peek()=="(" && str==")")||(s.peek()=="{" && str=="}") ||(s.peek()=="[" && str=="]")){
                        s.pop();
                    }
                    else{
                        s.push(str);
                    }
                }
            }
            
            if(s.size()==0)
            {
                System.out.println("true");
            }
            else{
                System.out.println("false");
            }
		}
		
	}
}

------------------------------------------------------------------------------------------------------------------------------------------
Problem No.8
Java Hashset

Program:
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

 public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        int t = s.nextInt();
        String [] pair_left = new String[t];
        String [] pair_right = new String[t];
        
        for (int i = 0; i < t; i++) {
            pair_left[i] = s.next();
            pair_right[i] = s.next();
        }
        HashSet<String> hs=new HashSet<>();
        for(int i=0;i<t;i++){
            String str=pair_left[i]+" "+pair_right[i];
            hs.add(str);
            System.out.println(hs.size());
        }
//Write your code here

    }
}

----------------------------------------------------------------------------------------------------------------------------------------
Problem No. 10
Java Generics

Program:

import java.io.IOException;
import java.lang.reflect.Method;
class Printer{
    public void printArray(Object[] a)
    {
        for(Object i:a){
            System.out.println(i);
        }
    }
}
public class Solution {


    public static void main( String args[] ) {
        Printer myPrinter = new Printer();
        Integer[] intArray = { 1, 2, 3 };
        String[] stringArray = {"Hello", "World"};
        myPrinter.printArray(intArray);
        myPrinter.printArray(stringArray);
        int count = 0;

        for (Method method : Printer.class.getDeclaredMethods()) {
            String name = method.getName();

            if(name.equals("printArray"))
                count++;
        }

        if(count > 1)System.out.println("Method overloading is not allowed!");
      
    }
}

--------------------------------------------------------------------------------------------------------------------------
Problem No. 11
Java Sort
Program:
import java.io.*;
import java.util.*;
class Student{
    private int id;
    private String fname;
    private double cgpa;
    public Student(int id, String fname, double cgpa) {
        super();
        this.id = id;
        this.fname = fname;
        this.cgpa = cgpa;
    }
    public int getId() {
        return id;
    }
    public String getFname() {
        return fname;
    }
    public double getCgpa() {
        return cgpa;
    }
}

class studentComp implements Comparator<Student> {
    public int compare(Student s1, Student s2){
        if(s1.getCgpa() == s2.getCgpa()){
            if (s1.getFname().equals(s2.getFname())) {
                return s1.getId() - s2.getId();
            }
            else {
                return s1.getFname().compareTo(s2.getFname());
            }
        }
        else {
            return Double.compare(s2.getCgpa(), s1.getCgpa());
        }
    }
}

public class Solution
{
    public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        int testCases = Integer.parseInt(in.nextLine());
        
        List<Student> studentList = new ArrayList<Student>();
        while(testCases>0){
            int id = in.nextInt();
            String fname = in.next();
            double cgpa = in.nextDouble();
            
            Student st = new Student(id, fname, cgpa);
            studentList.add(st);
            
            testCases--;
        }
        Collections.sort(studentList, new studentComp());
      
          for(Student st: studentList){
            System.out.println(st.getFname());
        }
    }
}
---------------------------------------------------------------------------------------------------------------------------------
Problem No. 12
Java Dequeue

Program:
    import java.util.*;
    public class test {
        public static void main(String[] args) {
            Scanner in = new Scanner(System.in);
            Deque d = new ArrayDeque<>();
            int n = in.nextInt();
            int m = in.nextInt();
            int max=Integer.MIN_VALUE;
            HashSet<Integer> hs=new HashSet<Integer>();
            for (int i = 0; i < n; i++) {
                int num = in.nextInt();
                if(d.size()<m){
                    d.add(num);
                    hs.add(num);
                    max=hs.size();
                }
                else{
                    if(max<hs.size()){
                        max=hs.size();
                    }
                    Object k=d.poll();
                    if(!d.contains(k))
                    hs.remove(k);
                    d.add(num);
                    hs.add(num);
                }
            }
            System.out.print(max);
        }
    }

-------------------------------------------------------------------------------------------------------------------------------------
Problem No.13
Java BitSet
Program:
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int m = sc.nextInt();
    String[] op = new String[m];
    int[] s1 = new int[m];
    int[] s2 = new int[m];
    for(int i=0; i<m; i++){
        op[i] = sc.next();
        s1[i] = sc.nextInt();
        s2[i] = sc.nextInt();
    }
    BitSet B1 = new BitSet(n);
    BitSet B2 = new BitSet(n);
   for(int i=0; i<m; i++){
        switch(op[i]){
            case "AND":
            if(s1[i] == 1)
                B1.and(B2);
            else
                B2.and(B1);
            break;

            case "OR":
            if(s1[i] == 1)
                B1.or(B2);
            else
                B2.or(B1);
            break;

            case "XOR":
            if(s1[i] == 1)
                B1.xor(B2);
            else
                B2.xor(B1);
            break;

            case "FLIP":
            if(s1[i] == 1)
                B1.flip(s2[i]);
            else
                B2.flip(s2[i]);
            break;

            case "SET":
            if(s1[i] == 1)
                B1.set(s2[i], true);
            else
                B2.set(s2[i], true);
            break;
        }
   System.out.println(B1.cardinality() + " " + B2.cardinality());
    }
}
}
-------------------------------------------------------------------------------------------------------------------------------------
Problem No. 14
Java Priority Queue

Program:
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.Collections;
import java.util.Comparator;
import java.util.PriorityQueue;
class Student {
    private int id;
    private String name;
    private double cgpa;

    public Student(int id, String name, double cgpa){
        this.id = id;
        this.name = name;
        this.cgpa = cgpa;
    }
    
    int getID(){
        return id;
    }
    
    String getName(){
        return name;
    }
    
    double getCGPA(){
        return cgpa;
    }
}
class Priorities {
    public List<Student> getStudents(List<String> events){
        List<Student> students = new ArrayList<Student>();
        for(int i=0; i < events.size(); i++){
            String[] event = events.get(i).split(" ");
            if(event[0].equals("ENTER")){
                students.add(new Student(Integer.valueOf(event[3]), event[1], Double.valueOf(event[2])));
            }else {
                Collections.sort(students, new studentComparetor());
                if(students.size() > 0){
                    students.remove(0);
                }
            }
        }
        return students;
    }
}

class studentComparetor implements Comparator<Student>{
    public int compare(Student s1, Student s2){
        if(s1.getCGPA() == s2.getCGPA()){
            if(s1.getName().compareTo(s2.getName()) == 0){
                return s1.getID() - s2.getID();
            }else {
                return s1.getName().compareTo(s2.getName());
            }  
        }else {
            return Double.compare(s2.getCGPA(), s1.getCGPA());
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------
Problem No. 15
Java Substring Comparisons

Program:
import java.util.Scanner;

public class Solution {

    public static String getSmallestAndLargest(String str, int number) { String smallest = ""; String largest = "";

    for(int i=0;i<=str.length()-number;i++){
        int range = i + number;
        String subStringI = str.substring(i,range);
        if(subStringI.compareTo(largest)>0){
            largest=subStringI;
        }
        if(subStringI.compareTo(smallest)<0){
            smallest=subStringI;
        }
        if(i==0){
            smallest=subStringI;
        }
    }
    return smallest + "\n" + largest;
}

-----------------------------------------------------------------------------------------------------------------------------------------
Problem No. 16
Java String Reverse

Program:
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String s=sc.next();
        int i=0,j=s.length()-1;
        while(i<=j){
            if(s.charAt(i)!=s.charAt(j)){
                System.out.println("No");
                break;
            }
            i++;
            j--;
        }
        if(i>=j){
            System.out.println("Yes");
        }
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------
Problem No. 17
Java Anagrams

Program:
import java.io.*;
import java.util.*;

public class Solution {
    static boolean isAnagram(String a, String b) {

    if(a.length() != b.length()){
        return false;
    }

    char[] arrA = a.toLowerCase().toCharArray();
    char[] arrB = b.toLowerCase().toCharArray();

    java.util.Arrays.sort(arrA);
    java.util.Arrays.sort(arrB);
    return java.util.Arrays.equals(arrA, arrB);

}
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
    String a = scan.next();
    String b = scan.next();
    scan.close();
    boolean ret = isAnagram(a, b);
    System.out.println( (ret) ? "Anagrams" : "Not Anagrams" );
    }
}
---------------------------------------------------------------------------------------------------------------------------------
Problem No. 18
Java String Tokens

Program:
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
    String s = scan.nextLine().trim();
    scan.close();
    if(s.length()==0){
        System.out.println("0");
        return;
    }
    String words[] = s.split("[\\s+ !,?._'@]+");
    System.out.println(words.length);
    for(String token:words){
        System.out.println(token);
    }
    }
}
----------------------------------------------------------------------------------------------------------------------------------------
Problem No. 19
Pattern Syntax Checker

Program:
import java.io.*;
import java.util.*;
import java.util.regex.*;
public class Solution {

    public static void main(String[] args) {
        Scanner sc = new Scanner (System.in);
        int cases = Integer.parseInt(sc.nextLine());

        while (cases > 0 && sc.hasNextLine()) {
                String patternRegex = sc.nextLine();
        try {
                Pattern r = Pattern.compile(patternRegex);
                System.out.println("Valid");
        }
        catch (PatternSyntaxException e) {
                System.out.println("Invalid");
        }
    }
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------
Problem No. 20
Java Regex

Program:
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
    while (sc.hasNext()) {
        String IP = sc.next();
        System.out.println(IP.matches(new newRegex().pattern));
    }
}
} 
class newRegex {

String numbb = "(([01]?\\d{1,2})|(2[0-4]\\d)|(25[0-5]))";
String pattern = String.format("%s.%s.%s.%s", numbb, numbb, numbb, numbb);
}
-------------------------------------------------------------------------------------------------------------------------------------------
Problem No. 22
Valid Username Regular Expression

Program:
import java.io.*;
import java.util.*;
import java.util.regex.*;
public class Solution {

    public static void main(String[] args) {
       Scanner scanner = new Scanner(System.in);
int n = scanner.nextInt();
String empty = scanner.nextLine();
Pattern specialCharactersString = Pattern.compile("[!@#$,'^%&*()+=|<>?{}\\[\\]~-]");
Matcher hasSpecial;
if (1 <= n && n <= 100) {
    String[] username = new String[n];
    for (int i = 0; i < n; i++) {
        username[i] = scanner.nextLine();
    }
   
    for (int i = 0; i < n; i++) {
        hasSpecial = specialCharactersString.matcher(username[i]);
        if ((username[i].length() >= 8) && (username[i].length() <= 30) && Character.isAlphabetic(username[i].charAt(0)) && !(hasSpecial.find())) {
            System.out.println("Valid");
        } else {
            System.out.println("Invalid");
        }
    }
    }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------
Problem No. 24
Java Currency Formatter

Program:
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    public static String formatCurrency(Locale locale, double value) {
NumberFormat currencyFormatter = NumberFormat.getCurrencyInstance(locale);
return currencyFormatter.format(value);
}
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
    double payment = scanner.nextDouble();
    scanner.close();

Locale usLocale = Locale.US;
String us = formatCurrency(usLocale, payment);

Locale indiaLocale = new Locale("en", "IN");
String india = formatCurrency(indiaLocale, payment);

Locale chinaLocale = Locale.CHINA;
String china = formatCurrency(chinaLocale, payment);

Locale franceLocale = Locale.FRANCE;
String france = formatCurrency(franceLocale, payment);




    System.out.println("US: " + us);
    System.out.println("India: " + india);
    System.out.println("China: " + china);
    System.out.println("France: " + france);
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------
Problem No. 25
Java Tag Content Extractor

Program:
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution{
	public static void main(String[] args) {
    String regex = "<(.+)>([^<>]+)</(\\1)>";
    Pattern p = Pattern.compile(regex);

    Scanner in = new Scanner(System.in);
    int testCases = Integer.parseInt(in.nextLine());

    while (testCases-- > 0) {
        String line = in.nextLine();
        Matcher m = p.matcher(line);

        if (m.find()) {
            m.reset();
            while (m.find()) {
                System.out.println(m.group(2));
            }
        } else {
            System.out.println("None");
        }
    }

    in.close();
}
}


